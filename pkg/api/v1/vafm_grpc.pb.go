// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VafmServiceClient is the client API for VafmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VafmServiceClient interface {
	// StartLocalVim starts a Virtualized Infrastructure Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vafm/config.yaml
	//   3. all bytes constituting the Virtualized Infrastructure Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVim(ctx context.Context, opts ...grpc.CallOption) (VafmService_StartLocalVimClient, error)
	// StartFromPreviousVim starts a new Virtualized Infrastructure Manager based on a previous one.
	// If the previous Virtualized Infrastructure Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVim(ctx context.Context, in *StartFromPreviousVimRequest, opts ...grpc.CallOption) (*StartVimResponse, error)
	// StartVimRequest starts a new Virtualized Infrastructure Manager based on its specification.
	StartVim(ctx context.Context, in *StartVimRequest, opts ...grpc.CallOption) (*StartVimResponse, error)
	// Searches for Virtualized Infrastructure Manager(s) known to this instance
	ListVims(ctx context.Context, in *ListVimsRequest, opts ...grpc.CallOption) (*ListVimsResponse, error)
	// Subscribe listens to new Virtualized Infrastructure Manager(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VafmService_SubscribeClient, error)
	// GetVim retrieves details of a single Virtualized Infrastructure Manager
	GetVim(ctx context.Context, in *GetVimRequest, opts ...grpc.CallOption) (*GetVimResponse, error)
	// Listen listens to Virtualized Infrastructure Manager updates and log output of a running Virtualized Infrastructure Manager
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VafmService_ListenClient, error)
	// StopVim stops a currently running Virtualized Infrastructure Manager
	StopVim(ctx context.Context, in *StopVimRequest, opts ...grpc.CallOption) (*StopVimResponse, error)
}

type vafmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVafmServiceClient(cc grpc.ClientConnInterface) VafmServiceClient {
	return &vafmServiceClient{cc}
}

func (c *vafmServiceClient) StartLocalVim(ctx context.Context, opts ...grpc.CallOption) (VafmService_StartLocalVimClient, error) {
	stream, err := c.cc.NewStream(ctx, &VafmService_ServiceDesc.Streams[0], "/v1.VafmService/StartLocalVim", opts...)
	if err != nil {
		return nil, err
	}
	x := &vafmServiceStartLocalVimClient{stream}
	return x, nil
}

type VafmService_StartLocalVimClient interface {
	Send(*StartLocalVimRequest) error
	CloseAndRecv() (*StartVimResponse, error)
	grpc.ClientStream
}

type vafmServiceStartLocalVimClient struct {
	grpc.ClientStream
}

func (x *vafmServiceStartLocalVimClient) Send(m *StartLocalVimRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vafmServiceStartLocalVimClient) CloseAndRecv() (*StartVimResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartVimResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vafmServiceClient) StartFromPreviousVim(ctx context.Context, in *StartFromPreviousVimRequest, opts ...grpc.CallOption) (*StartVimResponse, error) {
	out := new(StartVimResponse)
	err := c.cc.Invoke(ctx, "/v1.VafmService/StartFromPreviousVim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vafmServiceClient) StartVim(ctx context.Context, in *StartVimRequest, opts ...grpc.CallOption) (*StartVimResponse, error) {
	out := new(StartVimResponse)
	err := c.cc.Invoke(ctx, "/v1.VafmService/StartVim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vafmServiceClient) ListVims(ctx context.Context, in *ListVimsRequest, opts ...grpc.CallOption) (*ListVimsResponse, error) {
	out := new(ListVimsResponse)
	err := c.cc.Invoke(ctx, "/v1.VafmService/ListVims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vafmServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VafmService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &VafmService_ServiceDesc.Streams[1], "/v1.VafmService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &vafmServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VafmService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type vafmServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *vafmServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vafmServiceClient) GetVim(ctx context.Context, in *GetVimRequest, opts ...grpc.CallOption) (*GetVimResponse, error) {
	out := new(GetVimResponse)
	err := c.cc.Invoke(ctx, "/v1.VafmService/GetVim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vafmServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VafmService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &VafmService_ServiceDesc.Streams[2], "/v1.VafmService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &vafmServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VafmService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type vafmServiceListenClient struct {
	grpc.ClientStream
}

func (x *vafmServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vafmServiceClient) StopVim(ctx context.Context, in *StopVimRequest, opts ...grpc.CallOption) (*StopVimResponse, error) {
	out := new(StopVimResponse)
	err := c.cc.Invoke(ctx, "/v1.VafmService/StopVim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VafmServiceServer is the server API for VafmService service.
// All implementations must embed UnimplementedVafmServiceServer
// for forward compatibility
type VafmServiceServer interface {
	// StartLocalVim starts a Virtualized Infrastructure Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vafm/config.yaml
	//   3. all bytes constituting the Virtualized Infrastructure Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVim(VafmService_StartLocalVimServer) error
	// StartFromPreviousVim starts a new Virtualized Infrastructure Manager based on a previous one.
	// If the previous Virtualized Infrastructure Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVim(context.Context, *StartFromPreviousVimRequest) (*StartVimResponse, error)
	// StartVimRequest starts a new Virtualized Infrastructure Manager based on its specification.
	StartVim(context.Context, *StartVimRequest) (*StartVimResponse, error)
	// Searches for Virtualized Infrastructure Manager(s) known to this instance
	ListVims(context.Context, *ListVimsRequest) (*ListVimsResponse, error)
	// Subscribe listens to new Virtualized Infrastructure Manager(s) updates
	Subscribe(*SubscribeRequest, VafmService_SubscribeServer) error
	// GetVim retrieves details of a single Virtualized Infrastructure Manager
	GetVim(context.Context, *GetVimRequest) (*GetVimResponse, error)
	// Listen listens to Virtualized Infrastructure Manager updates and log output of a running Virtualized Infrastructure Manager
	Listen(*ListenRequest, VafmService_ListenServer) error
	// StopVim stops a currently running Virtualized Infrastructure Manager
	StopVim(context.Context, *StopVimRequest) (*StopVimResponse, error)
	mustEmbedUnimplementedVafmServiceServer()
}

// UnimplementedVafmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVafmServiceServer struct {
}

func (UnimplementedVafmServiceServer) StartLocalVim(VafmService_StartLocalVimServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalVim not implemented")
}
func (UnimplementedVafmServiceServer) StartFromPreviousVim(context.Context, *StartFromPreviousVimRequest) (*StartVimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousVim not implemented")
}
func (UnimplementedVafmServiceServer) StartVim(context.Context, *StartVimRequest) (*StartVimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVim not implemented")
}
func (UnimplementedVafmServiceServer) ListVims(context.Context, *ListVimsRequest) (*ListVimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVims not implemented")
}
func (UnimplementedVafmServiceServer) Subscribe(*SubscribeRequest, VafmService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedVafmServiceServer) GetVim(context.Context, *GetVimRequest) (*GetVimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVim not implemented")
}
func (UnimplementedVafmServiceServer) Listen(*ListenRequest, VafmService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedVafmServiceServer) StopVim(context.Context, *StopVimRequest) (*StopVimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVim not implemented")
}
func (UnimplementedVafmServiceServer) mustEmbedUnimplementedVafmServiceServer() {}

// UnsafeVafmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VafmServiceServer will
// result in compilation errors.
type UnsafeVafmServiceServer interface {
	mustEmbedUnimplementedVafmServiceServer()
}

func RegisterVafmServiceServer(s grpc.ServiceRegistrar, srv VafmServiceServer) {
	s.RegisterService(&VafmService_ServiceDesc, srv)
}

func _VafmService_StartLocalVim_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VafmServiceServer).StartLocalVim(&vafmServiceStartLocalVimServer{stream})
}

type VafmService_StartLocalVimServer interface {
	SendAndClose(*StartVimResponse) error
	Recv() (*StartLocalVimRequest, error)
	grpc.ServerStream
}

type vafmServiceStartLocalVimServer struct {
	grpc.ServerStream
}

func (x *vafmServiceStartLocalVimServer) SendAndClose(m *StartVimResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vafmServiceStartLocalVimServer) Recv() (*StartLocalVimRequest, error) {
	m := new(StartLocalVimRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VafmService_StartFromPreviousVim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousVimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VafmServiceServer).StartFromPreviousVim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VafmService/StartFromPreviousVim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VafmServiceServer).StartFromPreviousVim(ctx, req.(*StartFromPreviousVimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VafmService_StartVim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VafmServiceServer).StartVim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VafmService/StartVim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VafmServiceServer).StartVim(ctx, req.(*StartVimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VafmService_ListVims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VafmServiceServer).ListVims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VafmService/ListVims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VafmServiceServer).ListVims(ctx, req.(*ListVimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VafmService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VafmServiceServer).Subscribe(m, &vafmServiceSubscribeServer{stream})
}

type VafmService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type vafmServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *vafmServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VafmService_GetVim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VafmServiceServer).GetVim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VafmService/GetVim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VafmServiceServer).GetVim(ctx, req.(*GetVimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VafmService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VafmServiceServer).Listen(m, &vafmServiceListenServer{stream})
}

type VafmService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type vafmServiceListenServer struct {
	grpc.ServerStream
}

func (x *vafmServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VafmService_StopVim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VafmServiceServer).StopVim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VafmService/StopVim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VafmServiceServer).StopVim(ctx, req.(*StopVimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VafmService_ServiceDesc is the grpc.ServiceDesc for VafmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VafmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VafmService",
	HandlerType: (*VafmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousVim",
			Handler:    _VafmService_StartFromPreviousVim_Handler,
		},
		{
			MethodName: "StartVim",
			Handler:    _VafmService_StartVim_Handler,
		},
		{
			MethodName: "ListVims",
			Handler:    _VafmService_ListVims_Handler,
		},
		{
			MethodName: "GetVim",
			Handler:    _VafmService_GetVim_Handler,
		},
		{
			MethodName: "StopVim",
			Handler:    _VafmService_StopVim_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalVim",
			Handler:       _VafmService_StartLocalVim_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _VafmService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _VafmService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vafm.proto",
}
