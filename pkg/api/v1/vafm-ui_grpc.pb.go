// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VafmUIClient is the client API for VafmUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VafmUIClient interface {
	// ListVimSpecs returns a list of Virtualized Infrastructure Manager(s) that can be started through the UI.
	ListVimSpecs(ctx context.Context, in *ListVimSpecsRequest, opts ...grpc.CallOption) (VafmUI_ListVimSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type vafmUIClient struct {
	cc grpc.ClientConnInterface
}

func NewVafmUIClient(cc grpc.ClientConnInterface) VafmUIClient {
	return &vafmUIClient{cc}
}

func (c *vafmUIClient) ListVimSpecs(ctx context.Context, in *ListVimSpecsRequest, opts ...grpc.CallOption) (VafmUI_ListVimSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VafmUI_ServiceDesc.Streams[0], "/v1.VafmUI/ListVimSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &vafmUIListVimSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VafmUI_ListVimSpecsClient interface {
	Recv() (*ListVimSpecsResponse, error)
	grpc.ClientStream
}

type vafmUIListVimSpecsClient struct {
	grpc.ClientStream
}

func (x *vafmUIListVimSpecsClient) Recv() (*ListVimSpecsResponse, error) {
	m := new(ListVimSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vafmUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.VafmUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VafmUIServer is the server API for VafmUI service.
// All implementations must embed UnimplementedVafmUIServer
// for forward compatibility
type VafmUIServer interface {
	// ListVimSpecs returns a list of Virtualized Infrastructure Manager(s) that can be started through the UI.
	ListVimSpecs(*ListVimSpecsRequest, VafmUI_ListVimSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedVafmUIServer()
}

// UnimplementedVafmUIServer must be embedded to have forward compatible implementations.
type UnimplementedVafmUIServer struct {
}

func (UnimplementedVafmUIServer) ListVimSpecs(*ListVimSpecsRequest, VafmUI_ListVimSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVimSpecs not implemented")
}
func (UnimplementedVafmUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedVafmUIServer) mustEmbedUnimplementedVafmUIServer() {}

// UnsafeVafmUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VafmUIServer will
// result in compilation errors.
type UnsafeVafmUIServer interface {
	mustEmbedUnimplementedVafmUIServer()
}

func RegisterVafmUIServer(s grpc.ServiceRegistrar, srv VafmUIServer) {
	s.RegisterService(&VafmUI_ServiceDesc, srv)
}

func _VafmUI_ListVimSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVimSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VafmUIServer).ListVimSpecs(m, &vafmUIListVimSpecsServer{stream})
}

type VafmUI_ListVimSpecsServer interface {
	Send(*ListVimSpecsResponse) error
	grpc.ServerStream
}

type vafmUIListVimSpecsServer struct {
	grpc.ServerStream
}

func (x *vafmUIListVimSpecsServer) Send(m *ListVimSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VafmUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VafmUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VafmUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VafmUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VafmUI_ServiceDesc is the grpc.ServiceDesc for VafmUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VafmUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VafmUI",
	HandlerType: (*VafmUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _VafmUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVimSpecs",
			Handler:       _VafmUI_ListVimSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vafm-ui.proto",
}
